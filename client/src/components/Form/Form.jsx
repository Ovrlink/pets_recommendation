import Header from "../Header.jsx";
import RadioInput from "./RadioInput.jsx";
import Input from "./Input.jsx";
import questions from "../../util/questions.js";
import {
  isValidAge,
  isValidNumOfPeople,
  invalidCombination,
} from "../../util/validation.js";

import { useInput } from "../../hooks/useInput.js";
import { useNavigate } from "react-router-dom";
import { useState } from "react";

export default function FormPage() {
  const navigate = useNavigate();
  const [combErr, setCombErr] = useState(false);
  const {
    value: ageValue,
    handleInputChange: handleAgeChange,
    handleInputBlur: handleAgeBlur,
    hasError: ageHasError,
    resetInput: resetAge,
  } = useInput("", isValidAge);
  const {
    value: numValue,
    handleInputChange: handleNumChange,
    handleInputBlur: handleNumBlur,
    hasError: numHasError,
    resetInput: resetNum,
  } = useInput("", isValidNumOfPeople);

  function handleSubmit(event) {
    event.preventDefault();
    //–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    setCombErr(false);
    if (ageHasError) return;
    if (numHasError) return;
    if (invalidCombination(ageValue, numValue)) {
      setCombErr(true);
      return;
    }
    const fd = new FormData(event.target);
    const data = Object.fromEntries(fd.entries());

    //–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —É—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    if (Object.keys(data).length < 7) return;

    //–ü–µ—Ä–¥–∞—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –±–µ–∫

    sendUserData(data);

    //–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —ñ–Ω—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    navigate("/result");
  }

  function handleReset() {
    resetAge();
    resetNum();
  }
  return (
    <>
      <Header text="–¢–µ—Å—Ç –¥–ª—è –≤–∏–±–æ—Ä—É –¥–æ–º–∞—à–Ω—å–æ–≥–æ —É–ª—é–±–ª–µ–Ω—Ü—è" />
      <form onSubmit={handleSubmit}>
        <p className="recommendations">
          –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —â–æ–¥–æ –≤–∏–±–æ—Ä—É –º–∞–π–±—É—Ç–Ω—å–æ—ó
          –¥–æ–º–∞—à–Ω—å–æ—ó —Ç–≤–∞—Ä–∏–Ω–∫–∏üêæ
        </p>
        <hr />

        <Input
          label="–í—ñ–∫"
          instructions="–≤—ñ–¥ 10 –¥–æ 90"
          id="age"
          name="age"
          onBlur={handleAgeBlur}
          onChange={handleAgeChange}
          value={ageValue}
          min={10}
          max={90}
          error={ageHasError && "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫."}
        />

        <hr />

        <Input
          label="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π, —â–æ –ø—Ä–æ–∂–∏–≤–∞—î —Ä–∞–∑–æ–º –∑ –≤–∞–º–∏"
          instructions="–≤—ñ–¥ 0 (—Å–∞–º–æ—Ç–Ω—ñ–π) –¥–æ 12"
          id="people"
          name="people"
          onBlur={handleNumBlur}
          onChange={handleNumChange}
          value={numValue}
          min={0}
          max={12}
          error={numHasError && "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±."}
        />

        {questions.map((obj) => (
          <RadioInput
            key={obj.id}
            question={obj.question}
            answers={obj.answers}
            name={obj.name}
          />
        ))}
        <div className="control-error combination">
          {combErr && (
            <p>
              –í–∏ –≤–∫–∞–∑–∞–ª–∏, —â–æ –≤–∞–º –≤—ñ–¥ 10 –¥–æ 15 —Ä–æ–∫—ñ–≤ —ñ –≤–∏ –∂–∏–≤–µ—Ç–µ —Å–∞–º—ñ.
              <br />
              –î–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –Ω–∞–ª–µ–∂–Ω–æ–≥–æ –¥–æ–≥–ª—è–¥—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞
              —É–ª—é–±–ª–µ–Ω—Ü—è –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ –æ–ø—ñ–∫—É–Ω–∞
            </p>
          )}
        </div>

        <p className="form-actions">
          <button
            onClick={handleReset}
            type="reset"
            className="button button-flat"
          >
            –û—á–∏—Å—Ç–∏—Ç–∏
          </button>
          <button type="submit" className="button">
            –†–µ–∑—É–ª—å—Ç–∞—Ç
          </button>
        </p>
      </form>
    </>
  );
}

export async function sendUserData(data) {
  const response = await fetch("http://localhost:5000/api/data", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });
  if (!response.ok) {
    return { message: "Can not load results" };
  }
}
